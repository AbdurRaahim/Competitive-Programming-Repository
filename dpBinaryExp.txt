long long dp[105][105] = {};

    for (int i = 0; i < n; i++) {
        int t;
        scanf("%d", &t);
        t %= x;
        dp[0][t]++;
    }

    const int maxl = 40;
    for (int i = 1; i <= maxl; i++) {
        for (int j1 = 0; j1 < x; j1++) {
            for (int j2 = 0; j2 < x; j2++) {
                ll l = 1LL<<(i-1);
                int newmod = (j1 * power(10, l, x) + j2) % x;
                dp[i][newmod] += (dp[i-1][j1] * dp[i-1][j2]) % MOD;
                dp[i][newmod] %= MOD;
            }
        }
    }

    long long ways[2][105] = {};
    bool flag = true;
    int current = 0, prev = 1;
    for (int i = 0; i <= maxl; i++) {
        if (b & (1LL<<i)) {
            memset(ways[current], 0, sizeof(ways[current]));
            if (flag) {
                for (int j = 0; j < x; j++) {
                    ways[current][j] = dp[i][j];
                }
                flag = false;
            } else {
                for (int j1 = 0; j1 < x; j1++) {
                    for (int j2 = 0; j2 < x; j2++) {
                        ll l = 1LL<<i;
                        int newmod = (j1 * power(10, l, x) + j2) % x;
                        ways[current][newmod] += (ways[prev][j1] * dp[i][j2]) % MOD;
                        ways[current][newmod] %= MOD;
                    }
                }
            }
            swap(current, prev);
        }
    }
