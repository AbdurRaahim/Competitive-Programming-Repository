#define MAX 

long long dp[][];
bool exist[][];

long long solve()
{
	if () {
		return;
	}
	if(!exist[][])
	{
		long long answer = 0;
		//----type your code here----
		
		//---------------------------
		dp[][] = answer;
		exist[][] = true;
	}
	return dp[][];	
}

//-------------Digit-Dp------------------

template<typename T> string toString(T value)
{
	string s;
	while (value) {
		s.push_back(value % 10 + '0');
		value /= 10;
	}
	s.push_back('0');
	reverse(s.begin(), s.end());
	return s;
}

bool exist[][][];
long long dp[][][];

long long solve(const string &s, int digit, bool bound, )
{
	if (digit == s.size()) {
		return;
	}
	if (!exist[digit][bound][]) {
		int maxDigit = (bound)? s[digit]-'0': 9;
		long long answer = 0;
		for (int i = 0; i <= maxDigit; i++) {
			int newBound = (bound && ((s[digit] - '0') == i));
			answer += solve(s, digit+1, newBound, );
		}
		dp[digit][bound][]= answer;
		exist[digit][bound][] = true;
	}
	return dp[digit][bound][];
}